#get the data
data <- getGEO('GSE164191', GSEMatrix = TRUE)
expr <- as.data.frame(exprs(data[[1]]))
metadata = data[["GSE164191_series_matrix.txt.gz"]]@phenoData@data
#load packages you need
library("GEOquery")
#get the data
data <- getGEO('GSE164191', GSEMatrix = TRUE)
#get the data
data <- getGEO('GSE164191', GSEMatrix = TRUE)
#load packages you need
library("GEOquery")
#get the data
data <- getGEO('GSE164191', GSEMatrix = TRUE)
expr <- as.data.frame(exprs(data[[1]]))
metadata = data[["GSE164191_series_matrix.txt.gz"]]@phenoData@data
qqnorm(expr[1,])
qqline(expr[1,])
plot(density(expr_final$X1007_s_at[expr_final$condition == "normal"]), col = "red",
main = "Distribution X1007_s_at tumor vs healthy")
lines(density(expr_final$X1007_s_at[expr_final$condition == "colorectal cancer"]),
col = "blue")
# We said before that the gene expression data are normally distributed, let's
#check it again by plotting the normal distribution line
m<-mean(expr_final$X1007_s_at)
std<-sqrt(var(expr_final$X1007_s_at))
#To choose the type of line to use (such as dashed in the example) set lty. To change the thickness of the line use lwd.
curve(dnorm(x, mean=m, sd=std), col="green", lwd=2, lty = 2, add=TRUE)
expr_final = data.frame(t(expr), "condition" = metadata$disease_status)
expr_final = data.frame(t(expr), "condition" = metadata$disease_status)
#always rename the columns in a more appropriate format
colnames(metadata)[36] = "age"
colnames(metadata)[37] = "disease_status"
colnames(metadata)[38] = "gender"
m
# We said before that the gene expression data are normally distributed, let's
#check it again by plotting the normal distribution line
m<-mean(expr_final$X1007_s_at)
std<-sqrt(var(expr_final$X1007_s_at))
#To choose the type of line to use (such as dashed in the example) set lty. To change the thickness of the line use lwd.
curve(dnorm(x, mean=m, sd=std), col="green", lwd=2, lty = 2, add=TRUE)
expr_final = data.frame(t(expr), "condition" = metadata$disease_status)
# We said before that the gene expression data are normally distributed, let's
#check it again by plotting the normal distribution line
m <-mean(expr_final$X1007_s_at)
std<-sqrt(var(expr_final$X1007_s_at))
#To choose the type of line to use (such as dashed in the example) set lty. To change the thickness of the line use lwd.
curve(dnorm(x, mean=m, sd=std), col="green", lwd=2, lty = 2, add=TRUE)
plot(density(expr_final$X1007_s_at[expr_final$condition == "normal"]), col = "red",
main = "Distribution X1007_s_at tumor vs healthy")
lines(density(expr_final$X1007_s_at[expr_final$condition == "colorectal cancer"]),
col = "blue")
# We said before that the gene expression data are normally distributed, let's
#check it again by plotting the normal distribution line
m <-mean(expr_final$X1007_s_at)
std<-sqrt(var(expr_final$X1007_s_at))
#To choose the type of line to use (such as dashed in the example) set lty. To change the thickness of the line use lwd.
curve(dnorm(x, mean=m, sd=std), col="green", lwd=2, lty = 2, add=TRUE)
plot(density(expr_final$X1007_s_at[expr_final$condition == "normal"]), col = "red",
main = "Distribution X1007_s_at tumor vs healthy")
lines(density(expr_final$X1007_s_at[expr_final$condition == "colorectal cancer"]),
col = "blue")
# We said before that the gene expression data are normally distributed, let's
#check it again by plotting the normal distribution line
m <-mean(expr_final$X1007_s_at)
std<-sqrt(var(expr_final$X1007_s_at))
#To choose the type of line to use (such as dashed in the example) set lty. To change the thickness of the line use lwd.
curve(dnorm(x, mean=m, sd=std), col="green", lwd=2, lty = 2, add=TRUE)
View(expr_final)
healthy = expr_final[expr_final$condition == "normal", ]
tumor =expr_final[expr_final$condition == "colorectal cancer", ]
pvalue = NULL
for(i in 1 : ncol(expr_final)) {
x = healthy[,i]
y = tumor[,i]
t = t.test(x, y)
# Add the calculated values to the list
pvalue[i] = t$p.value
}
pvalue[1:20]
hist(pvalue) #let's look at the values below the significance threshold of 0.05
hist(pvalue, xlim = c(0, 0.1), breaks = 100)
abline(v = 0.05,  col= "red")
#how many genes have a p-value below 0.05?
sum(pvalue <= 0.05)
adjusted_p = p.adjust(pvalue, method = "bonferroni)
)
""
")
adjusted_p = p.adjust(pvalue, method = "bonferroni")
?adjusted_p
?p.adjust
sum(adjusted_p <= 0.05)
mean_healthy = apply(healthy, 2, function(x) mean(as.numeric(x), na.rm = TRUE))
mean_tumor = apply(tumor, 2, function(x) mean(as.numeric(x), na.rm = TRUE))
fold_change = mean_healthy/mean_tumor
fold_change[1:2]
fold_change[1:20]
sum(abs(fold_change) > fold_threshold)
# Also in the case of fold change, it is necessary to set a threshold. There is no
# correct or wrong value.
fold_threshold = 1.5
sum(abs(fold_change) > fold_threshold)
fold_change = mean_healthy/mean_tumor
fold_change = fold_change[-length(fold_change)]
# Also in the case of fold change, it is necessary to set a threshold. There is no
# correct or wrong value.
fold_threshold = 0.5
sum(abs(fold_change) > fold_threshold)
# Also in the case of fold change, it is necessary to set a threshold. There is no
# correct or wrong value.
fold_threshold = 1
sum(abs(fold_change) > fold_threshold)
# The volcano plot is a really easy and straightforward visualization of the genes
# that are both biologically and statistically significant.
plot(log2(fold_change), -log10(pvalue), main = "Volcano plot", xlab = ("fold change"),
ylab = ("pvalue"))
abline(v = log2(fold_threshold), col = "red")
# Also in the case of fold change, it is necessary to set a threshold. There is no
# correct or wrong value.
fold_threshold = 1.5
abline(v = log2(fold_threshold), col = "red")
# The volcano plot is a really easy and straightforward visualization of the genes
# that are both biologically and statistically significant.
plot(log2(fold_change), -log10(pvalue), main = "Volcano plot", xlab = ("fold change"),
ylab = ("pvalue"))
abline(v = log2(fold_threshold), col = "red")
abline(v = -log2(fold_threshold), col = "blue")
abline(h = -log10(0.05), col = "pink")
# The last important step is to extract the top 20 genes that are both the
# ones with the highest statistical and biological significance
expr_final = expr_final[, -ncol(expr_final)]
final_genes = data.frame(row.names = colnames(expr_final), adjusted_p, fold_change)
View(final_genes)
final_genes = final_genes[final_genes$adjusted_p < 0.05, ]
View(final_genes)
#sort it by pvalue
final_genes = final_genes[order(final_genes$adjusted_p), ]
View(final_genes)
# Correlation (add heatmap)
# The correlation in statistics measures how related are two variables, more in detail
# how their value changes in correspondence to one another.
corr = cor(expr_final[, 1:20]) #take a sample or too many genes
corr
#We are using the default correlation method, which is Pearson. However, there is Spearman correlation
# that is usually better suited when you have a lot of outliers
diag(corr) = NA
pheatmap::pheatmap(corr)
library(pheatmap)
pheatmap(corr)
heatmap(corr)
pheatmap(corr)
#extract the ten top differentially expressed genes from the original expression list
selected_genes = rownames(final_genes[1:10, ])
log_df = expr_final[,selected_genes]
View(log_df)
#let's define as 1 the tumor sample and as 0 the healthy samples
log_df = data.frame(log_df, metadata$disease_status)
View(log_df)
for(i in 1:nrow(log_df)) {
if (log_df$metadata.disease_status[i] == "normal") {
log_df$metadata.disease_status[i] = 0
} else if(log_df$metadata.disease_status[i] == "colorectal cancer") {
log_df$metadata.disease_status[i] = 1
}
}
View(log_df)
#IMPORTANT!!!
log_df$metadata.disease_status = as.factor(log_df$metadata.disease_status)
View(log_df)
levels(log_df$metadata.disease_status)
size <- floor(0.75 * nrow(log_df)) #let's extract how long should our dataset be
train_ind <- sample(seq_len(nrow(log_df)), size = size)
?sample
train_ind
train <- log_df[train_ind, ] #takes only the rows that are in train_ind
test <- log_df[-train_ind, ]#takes only the rows that are not in train_ind
View(train)
View(test)
View(train)
logit <- glm(metadata.disease_status ~ X209635_at +
X1557067_s_at + X222018_at + X202479_s_at + X200882_s_at, data = train,
family = "binomial")
#let's check how the model looks
summary(logit)
View(test)
# Let's test the results of the model on our train data and see how it performs.
test$pred <- predict(logit, newdata = test, type = "response")
View(test)
levels(log_df$metadata.disease_status)
#Let's set a threshold to specify what to define as tumor and what as healthy
for(i in 1:nrow(test)) {
if (test$pred[i] < 0.5) {
test$pred[i] = 0
} else if(test$pred[i] >= 0.5) {
test$pred[i] = 1
}
}
View(test)
View(test)
View(metadata)
expr = metadata[metadata$gender == c("Female", "Male"), ]
expr = metadata[metadata$gender == "Female" or metadata$disease_status == "Male", ]
expr = metadata[metadata$gender in c("Female","Male"), ]
expr = metadata[metadata$gender %in% c("Female","Male"), ]
